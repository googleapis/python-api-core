# (generated with --quick)

import asyncio.futures
from typing import Any, Callable, Coroutine, Generator, Optional, TypeVar

HAS_GRPC_GCP: bool
aio: module
asyncio: module
exceptions: module
functools: module
grpc: module
grpc_helpers: module

_T_WrappedCall = TypeVar('_T_WrappedCall', bound=_WrappedCall)

class FakeStreamUnaryCall(_WrappedStreamUnaryCall):
    __doc__: str
    _future: asyncio.futures.Future
    response: Any
    def __await__(self) -> Generator[nothing, Any, Any]: ...
    def __init__(self, response = ...) -> None: ...
    def wait_for_connection(self) -> Coroutine[Any, Any, None]: ...

class FakeUnaryUnaryCall(_WrappedUnaryUnaryCall):
    __doc__: str
    _future: asyncio.futures.Future
    response: Any
    def __await__(self) -> Generator[nothing, Any, Any]: ...
    def __init__(self, response = ...) -> None: ...

class _WrappedCall(Any):
    _call: Any
    def __init__(self) -> None: ...
    def add_done_callback(self, callback) -> None: ...
    def cancel(self) -> Any: ...
    def cancelled(self) -> Any: ...
    def code(self) -> coroutine: ...
    def details(self) -> coroutine: ...
    def done(self) -> Any: ...
    def initial_metadata(self) -> coroutine: ...
    def time_remaining(self) -> Any: ...
    def trailing_metadata(self) -> coroutine: ...
    def wait_for_connection(self) -> Coroutine[Any, Any, None]: ...
    def with_call(self: _T_WrappedCall, call) -> _T_WrappedCall: ...

class _WrappedStreamRequestMixin(_WrappedCall):
    _call: None
    def done_writing(self) -> Coroutine[Any, Any, None]: ...
    def write(self, request) -> Coroutine[Any, Any, None]: ...

class _WrappedStreamResponseMixin(_WrappedCall):
    _wrapped_async_generator: Optional[asyncgenerator]
    def __aiter__(self) -> Any: ...
    def __init__(self) -> None: ...
    def _wrapped_aiter(self) -> asyncgenerator: ...
    def read(self) -> coroutine: ...

class _WrappedStreamStreamCall(_WrappedStreamRequestMixin, _WrappedStreamResponseMixin, Any):
    __doc__: str
    _call: Any
    _wrapped_async_generator: None

class _WrappedStreamUnaryCall(_WrappedUnaryResponseMixin, _WrappedStreamRequestMixin, Any):
    __doc__: str
    _call: Any

class _WrappedUnaryResponseMixin(_WrappedCall):
    _call: None
    def __await__(self) -> Generator[nothing, Any, Any]: ...

class _WrappedUnaryStreamCall(_WrappedStreamResponseMixin, Any):
    __doc__: str
    _call: Any
    _wrapped_async_generator: None

class _WrappedUnaryUnaryCall(_WrappedUnaryResponseMixin, Any):
    __doc__: str
    _call: Any

def _wrap_stream_errors(callable_) -> Callable: ...
def _wrap_unary_errors(callable_) -> Callable: ...
def create_channel(target, credentials = ..., scopes = ..., ssl_credentials = ..., credentials_file = ..., **kwargs) -> Any: ...
def wrap_errors(callable_) -> Callable: ...
