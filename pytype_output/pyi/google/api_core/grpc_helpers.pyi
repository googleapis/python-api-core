# (generated with --quick)

from typing import Any, Callable, Dict, Iterable, List, Sized, Tuple, Type, TypeVar

_ChannelRequest = `namedtuple-_ChannelRequest-method-request`
_MethodCall = `namedtuple-_MethodCall-request-timeout-metadata-credentials`

HAS_GRPC_GCP: bool
_STREAM_WRAP_CLASSES: Tuple[Any, Any]
collections: module
exceptions: module
general_helpers: module
google: module
grpc: module
grpc_gcp: module
six: module

_T_StreamingResponseIterator = TypeVar('_T_StreamingResponseIterator', bound=_StreamingResponseIterator)
_Tnamedtuple-_ChannelRequest-method-request = TypeVar('_Tnamedtuple-_ChannelRequest-method-request', bound=`namedtuple-_ChannelRequest-method-request`)
_Tnamedtuple-_MethodCall-request-timeout-metadata-credentials = TypeVar('_Tnamedtuple-_MethodCall-request-timeout-metadata-credentials', bound=`namedtuple-_MethodCall-request-timeout-metadata-credentials`)

class ChannelStub(Any):
    __doc__: str
    _method_stubs: Dict[Any, _CallableStub]
    requests: List[nothing]
    def __getattr__(self, key) -> Any: ...
    def __init__(self, responses = ...) -> None: ...
    def _stub_for_method(self, method) -> _CallableStub: ...
    def close(self) -> None: ...
    def stream_stream(self, method, request_serializer = ..., response_deserializer = ...) -> _CallableStub: ...
    def stream_unary(self, method, request_serializer = ..., response_deserializer = ...) -> _CallableStub: ...
    def subscribe(self, callback, try_to_connect = ...) -> None: ...
    def unary_stream(self, method, request_serializer = ..., response_deserializer = ...) -> _CallableStub: ...
    def unary_unary(self, method, request_serializer = ..., response_deserializer = ...) -> _CallableStub: ...
    def unsubscribe(self, callback) -> None: ...

class _CallableStub:
    __doc__: str
    _channel: Any
    _method: Any
    calls: List[`namedtuple-_MethodCall-request-timeout-metadata-credentials`]
    requests: list
    response: None
    responses: None
    def __call__(self, request, timeout = ..., metadata = ..., credentials = ...) -> Any: ...
    def __init__(self, method, channel) -> None: ...

class _StreamingResponseIterator(Any):
    _stored_first_result: Any
    _wrapped: Any
    def __init__(self, wrapped) -> None: ...
    def __iter__(self: _T_StreamingResponseIterator) -> _T_StreamingResponseIterator: ...
    def __next__(self) -> Any: ...
    def add_callback(self, callback) -> Any: ...
    def cancel(self) -> Any: ...
    def code(self) -> Any: ...
    def details(self) -> Any: ...
    def initial_metadata(self) -> Any: ...
    def is_active(self) -> Any: ...
    def next(self) -> Any: ...
    def time_remaining(self) -> Any: ...
    def trailing_metadata(self) -> Any: ...

class `namedtuple-_ChannelRequest-method-request`(tuple):
    __slots__ = ["method", "request"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str]
    method: Any
    request: Any
    def __getnewargs__(self) -> Tuple[Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-_ChannelRequest-method-request`], method, request) -> `_Tnamedtuple-_ChannelRequest-method-request`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-_ChannelRequest-method-request`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-_ChannelRequest-method-request`: ...
    def _replace(self: `_Tnamedtuple-_ChannelRequest-method-request`, **kwds) -> `_Tnamedtuple-_ChannelRequest-method-request`: ...

class `namedtuple-_MethodCall-request-timeout-metadata-credentials`(tuple):
    __slots__ = ["credentials", "metadata", "request", "timeout"]
    __dict__: collections.OrderedDict[str, Any]
    _fields: Tuple[str, str, str, str]
    credentials: Any
    metadata: Any
    request: Any
    timeout: Any
    def __getnewargs__(self) -> Tuple[Any, Any, Any, Any]: ...
    def __getstate__(self) -> None: ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __new__(cls: Type[`_Tnamedtuple-_MethodCall-request-timeout-metadata-credentials`], request, timeout, metadata, credentials) -> `_Tnamedtuple-_MethodCall-request-timeout-metadata-credentials`: ...
    def _asdict(self) -> collections.OrderedDict[str, Any]: ...
    @classmethod
    def _make(cls: Type[`_Tnamedtuple-_MethodCall-request-timeout-metadata-credentials`], iterable: Iterable, new = ..., len: Callable[[Sized], int] = ...) -> `_Tnamedtuple-_MethodCall-request-timeout-metadata-credentials`: ...
    def _replace(self: `_Tnamedtuple-_MethodCall-request-timeout-metadata-credentials`, **kwds) -> `_Tnamedtuple-_MethodCall-request-timeout-metadata-credentials`: ...

def _create_composite_credentials(credentials = ..., credentials_file = ..., scopes = ..., ssl_credentials = ...) -> Any: ...
def _patch_callable_name(callable_) -> None: ...
def _simplify_method_name(method) -> Any: ...
def _wrap_stream_errors(callable_) -> Callable: ...
def _wrap_unary_errors(callable_) -> Callable: ...
def create_channel(target, credentials = ..., scopes = ..., ssl_credentials = ..., credentials_file = ..., **kwargs) -> Any: ...
def wrap_errors(callable_) -> Callable: ...
