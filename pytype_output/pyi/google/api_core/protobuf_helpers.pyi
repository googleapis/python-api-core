# (generated with --quick)

import google.protobuf.field_mask_pb2
import google.protobuf.wrappers_pb2
from typing import Any, Tuple, Type, TypeVar, Union

_SENTINEL: Any
_WRAPPER_TYPES: Tuple[Type[google.protobuf.wrappers_pb2.BoolValue], Type[google.protobuf.wrappers_pb2.BytesValue], Type[google.protobuf.wrappers_pb2.DoubleValue], Type[google.protobuf.wrappers_pb2.FloatValue], Type[google.protobuf.wrappers_pb2.Int32Value], Type[google.protobuf.wrappers_pb2.Int64Value], Type[google.protobuf.wrappers_pb2.StringValue], Type[google.protobuf.wrappers_pb2.UInt32Value], Type[google.protobuf.wrappers_pb2.UInt64Value]]
collections: module
collections_abc: module
copy: module
field_mask_pb2: module
inspect: module
message: module
wrappers_pb2: module

_T1 = TypeVar('_T1')

def _field_mask_helper(original, modified, current = ...) -> list: ...
def _get_path(current, name: _T1) -> Union[str, _T1]: ...
def _is_message(value) -> bool: ...
def _is_wrapper(value) -> bool: ...
def _resolve_subkeys(key, separator = ...) -> Any: ...
def _set_field_on_message(msg, key, value) -> None: ...
def check_oneof(**kwargs) -> None: ...
def field_mask(original, modified) -> google.protobuf.field_mask_pb2.FieldMask: ...
def from_any_pb(pb_type, any_pb) -> Any: ...
def get(msg_or_dict, key, default = ...) -> Any: ...
def get_messages(module) -> collections.OrderedDict[str, Any]: ...
def set(msg_or_dict, key, value) -> None: ...
def setdefault(msg_or_dict, key, value) -> None: ...
